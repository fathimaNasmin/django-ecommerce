"""Test for Order models."""
from decimal import Decimal

from django.test import TestCase
from django.core.exceptions import ValidationError

from order.models import Order, OrderDetail
from store.models import Product
from django.contrib.auth import get_user_model


class OrderModelTests(TestCase):
    """Tests the order model."""
    def setUp(self):
        email = 'test@example.com'
        password = 'testpassword'
        self.user = get_user_model().objects.create_user(
            email=email,
            password=password
        )
        
    def test_create_an_order(self):
        """Test create an order."""
        self.order = Order.objects.create(
            customer=self.user,
            amount=Decimal('50.87'),
            transaction_id='djhfgkshgd39948dkjfk'
        )
        
        self.assertEqual(Order.objects.count(), 1)
        self.assertEqual(self.order.customer.email, 'test@example.com')
        
    def test_generated_order_id(self):
        """Tests the autogenerated order_id is saved."""
        self.order = Order.objects.create(
            customer=self.user,
            amount=Decimal('50.87'),
            transaction_id='djhfgkshgd39948dkjfk'
        )
        
        saved_order = Order.objects.get(order_id=self.order.order_id)
        
        self.assertIsNotNone(saved_order.order_id)
        
    def test_order_amount_raises_error(self):
        """Test the invalid amount raises validation error."""
        self.order = Order.objects.create(
            customer=self.user,
            amount=Decimal('0'),
            transaction_id='djhfgkshgd39948dkjfk'
        )
        
        with self.assertRaises(ValidationError) as context:
            self.order.full_clean()
            
        self.assertIn('amount', str(context.exception))
        
    